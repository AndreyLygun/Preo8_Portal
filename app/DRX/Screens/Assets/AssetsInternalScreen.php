<?php

namespace App\DRX\Screens\Assets;

use App\DRX\Helpers\Databooks;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;
use Orchid\Screen\Actions\Link;
use Orchid\Screen\Fields\CheckBox;
use Orchid\Screen\Fields\Select;
use Orchid\Support\Facades\Layout;
use Orchid\Screen\Fields\Input;
use Orchid\Support\Color;
use App\DRX\ExtendedMatrix;
use App\DRX\Helpers\Functions;
use Orchid\Screen\Fields\DateTimer;
use Orchid\Support\Facades\Toast;
use App\DRX\Screens\SecuritySRQScreen;


class AssetsInternalScreen extends SecuritySRQScreen
{

    protected $EntityType = 'IServiceRequestsPass4AssetsInternalMovings';
    protected $Title = 'Внутреннее перемещение ТМЦ';

    public function ExpandFields()
    {
        $ExpandFields = ['Inventory', 'ElevatorTimeSpan($expand=Name)'];
        return array_merge(parent::ExpandFields(), $ExpandFields);
    }

    public function commandBar(): iterable
    {
        $buttons = parent::commandBar();
        if (isset($this->entity["Id"]))
            $buttons[] = Link::make('Копировать')->route(Route::currentRouteName(), ['fromId' => $this->entity['Id']]);
        return $buttons;
    }

    public function CollectionFields()
    {
        return array_merge(parent::CollectionFields(), ["Inventory", 'ElevatorTimeSpan']);
    }

    public function query(int $id = null): iterable
    {
        $query = parent::query($id); // TODO: Change the autogenerated stub
        if (isset($query["entity"]["ElevatorTimeSpan"])) {
            $ElevatorTimeSpan = collect($query["entity"]["ElevatorTimeSpan"])->map(fn($value) => $value["Name"]["Id"]);
            $query["entity"]["ElevatorTimeSpan"] = $ElevatorTimeSpan->toArray();
        }
        return $query;
    }

    public function beforeSave()
    {
        parent::beforeSave();
        if (isset($this->entity["ElevatorTimeSpan"]))
            $this->entity["ElevatorTimeSpan"] = collect($this->entity["ElevatorTimeSpan"])->map(fn($value)=>(object)["Name" => (object) ["Id" => (int) $value]])->toArray();
    }

    public function layout(): iterable
    {
        $IdNameFunction = function($value) {
            return [$value['Id']=>$value['Name']];
        };
        $TimeSpans = Databooks::GetTimeSpans();
        $layout = parent::layout();
        $readonly = $this->readOnly;
        $layout[] = Layout::rows([
            DateTimer::make('entity.ValidOn')
                ->title("Дата перемещения")->horizontal()
                ->format('d-m-Y')->serverFormat('d-m-Y')
                ->required()->disabled($readonly)
                ->min(Carbon::now()->hour < 14?Carbon::today():Carbon::tomorrow())
                ->help("Заявки &laquo;на сегодня&raquo; принимаются до 14:00. Время согласования заявки - 3 часа"),
            Input::make('entity.From')
                ->title('Откуда')
                ->horizontal()
                ->required()
                ->help("Укажите блок, этаж, помещение")
                ->disabled($readonly),
            Input::make('entity.To')
                ->title('Куда')
                ->horizontal()
                ->required()
                ->help("Укажите блок, этаж, помещение")
                ->disabled($readonly),
            Select::make("entity.Elevator")
                ->title('Через грузовой лифт')->horizontal()
                ->empty('')->required()
                ->options(Databooks::GetYesNo())
                ->disabled($this->readOnly),
            Select::make('entity.ElevatorTimeSpan')
                ->title('Время использования лифта')->horizontal()
                ->options(Databooks::GetTimeSpans())
                ->empty('Выберите время использование лифта')
                ->help('Можно выбрать до трех интервалов')
                ->multiple(true)->maximumSelectionLength(3)
                ->disabled($readonly),
            Select::make("entity.StorageRoom")
                ->title('Через комнату временного хранения')->horizontal()
                ->empty('')->required()
                ->options(Databooks::GetYesNo())
                ->disabled($this->readOnly),
        ])->title('Сведения о перемещении');

        $layout[] = Layout::rows([
            Select::make("entity.BuildingMaterials")
                ->title('Среди ТМЦ есть стройматериалы')->horizontal()
                ->options(Databooks::GetYesNo())->empty('')
                ->disabled($this->readOnly)->required(),
            ExtendedMatrix::make('entity.Inventory')
                ->columns(['Описание' => 'Name', 'Габариты' => 'Size', 'Количество' => 'Quantity'])
                ->readonly($readonly)
        ])->title("Описание ТМЦ");

        return $layout;
    }

    public function saveCarrier(Request $request) {
        Toast::info("ok, saved");
        $validated = $request->validate([
            'entity.Id' => '',
            'entity.CarModel' => '',
            'entity.CarNumber' => '',
            'entity.Visitors' => ''
        ]);
        $this->SaveToDRX(false, $validated["entity"]);
    }
}
