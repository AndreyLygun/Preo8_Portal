<?php

namespace App\Orchid\Screens\DRX;

use Illuminate\Http\Request;
use Orchid\Screen\Actions\Button;
use Orchid\Screen\Fields\CheckBox;
use Orchid\Screen\Fields\Label;
use Orchid\Screen\Fields\Select;
use Orchid\Screen\Fields\TextArea;
use Orchid\Screen\Screen;
use Orchid\Support\Facades\Layout;
use Orchid\Screen\Fields\Input;
use Orchid\Support\Color;
use App\DRX\ExtendedMatrix;
use Orchid\Screen\Fields\DateTimer;
use Orchid\Support\Facades\Toast;



class Pass4AssetsMovingScreen extends SecuritySRQScreen
{

    protected $EntityType = 'IServiceRequestsPass4AssetsMovings';
    protected $Title = 'Заявка на перемещение ТМЦ';

    public function ExpandFields()
    {
        $ExpandFields = ['LoadingSite', 'TimeSpan', 'Inventory', 'ElevatorTimeSpan($expand=Name)'];
        return array_merge(parent::ExpandFields(), $ExpandFields);
    }

    public function CollectionFields()
    {
        return array_merge(parent::CollectionFields(), ["Inventory", 'ElevatorTimeSpan']);
    }

    public function query(int $id = null): iterable
    {
        $query = parent::query($id); // TODO: Change the autogenerated stub
        $ElevatorTimeSpan = collect($query["entity"]["ElevatorTimeSpan"])->map(fn($value) => $value["Name"]["Id"]);
        $query["entity"]["ElevatorTimeSpan"] = $ElevatorTimeSpan->toArray();
        return $query;
    }



    public function beforeSave()
    {
        parent::beforeSave();
        $this->NormalizeDate(['ValidOn']);
        if (isset($this->entity["ElevatorTimeSpan"]))
            $this->entity["ElevatorTimeSpan"] = collect($this->entity["ElevatorTimeSpan"])->map(fn($value)=>(object)["Name" => (object) ["Id" => (int) $value]])->toArray();
        //dd(json_encode($this->entity["ElevatorTimeSpan"]));
    }

    public function layout(): iterable
    {
        //dd($this->entity);
        $IdNameFunction = function($value) {
            return [$value['Id']=>$value['Name']];
        };
        $LoadingSites = collect($this->Sites)->where('Type', 'Loading')->mapWithKeys($IdNameFunction);
        $TimeSpans = collect($this->TimeSpans)->mapWithKeys($IdNameFunction);
        $layout = parent::layout();
        $readonly = $this->readOnly;
        $layout[] = Layout::rows([
            Select::make('entity.MovingDirection')
                ->title('Направление перемещения')
                ->options(config('srq.MovingDirection'))->empty('')
                ->required()
                ->horizontal()
                ->disabled($readonly),
            DateTimer::make('entity.ValidOn')
                ->title("Дата перемещения")
                ->format('d-m-Y')
                ->serverFormat('d-m-Y')
                ->required()
                ->horizontal()
                ->enableTime(false)
                ->min($this->EearliestDate(14))
                ->help("Заявки &laquo;на сегодня&raquo; принимаются до 14:00. Время согласования заявки - 3 часа")
                ->disabled($readonly),
            Select::make('entity.LoadingSite.Id')
                ->title('Место разгрузки')
                ->options($LoadingSites)
                ->required()
                ->horizontal()
                ->disabled($readonly),
            Input::make('entity.Floor')
                ->title('Этаж')
                ->horizontal()
                ->required()
                ->disabled($readonly),
            CheckBox::make('entity.Elevator')
                ->title('Требуется грузовой лифт')
                ->horizontal()
                ->value('true')->set('yesvalue', 'true')->set('novalue', 'false')
                ->disabled($readonly)->sendTrueOrFalse(),
            Select::make('entity.ElevatorTimeSpan')
                ->title('Время использования лифта')
                ->options($TimeSpans)
                ->horizontal()
                ->empty('Выберите время использование лифта')
                ->help('Можно выбрать до двух интервалов')
                ->multiple(true)
                ->maximumSelectionLength(2)
                ->disabled($readonly),
            CheckBox::make('entity.StorageRoom')
                ->title('Через комнату временного хранения')
                ->horizontal()
                ->value('true')->set('yesvalue', 'true')->set('novalue', 'false')
                ->disabled($readonly)->sendTrueOrFalse(),
        ])->title('Сведения о перемещении');

        $layout[] = Layout::rows([
            CheckBox::make("entity.BuildingMaterials")
                ->title('Среди ТМЦ есть стройматериалы')
                ->horizontal()
                ->value('false')->set('yesvalue', 'true')->set('novalue', 'false')
                ->disabled($readonly)->sendTrueOrFalse(),
            ExtendedMatrix::make('entity.Inventory')
                ->columns(['Описание' => 'Name', 'Габариты' => 'Size', 'Количество' => 'Quantity'])
                ->readonly($readonly)
        ])->title("Описание ТМЦ");

        $layout[] = Layout::rows([
            Label::make('')->value('Сведения о перевозчике можно заполнить после согласования пропуска')->class("small mt-0 mb-0"),
            Input::make('entity.CarModel')->title('Модель автомобиля')->horizontal(),
            Input::make('entity.CarNumber')->title('Номер автомобиля')->horizontal(),
            TextArea::make('entity.Visitors')->title('Грузчики')->horizontal()->rows(3),
            Button::make(__("Save"))->type(Color::BASIC)->method('saveCarrier')->style()->canSee($this->entity['RequestState']=='Approved'),
        ]) ->title('Сведения о перевозчике');
        return $layout;
    }

    public function saveCarrier(Request $request) {
        Toast::info("ok, saved");
        $validated = $request->validate([
            'entity.Id' => '',
            'entity.CarModel' => '',
            'entity.CarNumber' => '',
            'entity.Visitors' => ''
        ]);
        $this->SaveToDRX(false, $validated["entity"]);
    }
}
